@mixin breakpoint($breakpoint) {
  @media (min-width: map-get($breakpoints, $breakpoint)) {
    @content;
  }
}

@mixin container() {
  .container {
    width: 90%;
    margin-right: auto;
    margin-left: auto;
  }
  @each $breakpoint, $width in $breakpoints {
    @include breakpoint($breakpoint) {
      .container {
        max-width: map-get($container-widths, $breakpoint);
      }
    }
  }
}

@mixin responsive-extras($extras) {
  @each $breakpoint, $width in $breakpoints {
    @include breakpoint($breakpoint) {
      @include make-extras($extras, "-#{$breakpoint}");
    }
  }
}

@mixin make-extras($extras, $responsive_infix: "") {
  @each $k, $p in $extras {
    $values: map-get($p, values);
    $cls: map-get($p, class);
    $properties: map-get($p, property);

    @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
      $values: zip($values, $values);
    }

    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    $cls: if(map-has-key($p, class), map-get($p, class), nth($properties, 1));
    $cls: if($cls == null, "", $cls);

    @each $key, $value in $values {
      $responsive_infix: if(
        $cls == "" and str-slice($responsive_infix, 1, 1) == "-",
        str-slice($responsive_infix, 2),
        $responsive_infix
      );

      $property-class-modifier: if(
        $key,
        if($cls == "" and $responsive_infix == "", "", "-") + $key,
        ""
      );

      @if $key {
        .#{$cls + $responsive_infix + $property-class-modifier} {
          @each $property in $properties {
            #{$property}: $value;
          }
        }
      } @else {
        .#{$cls + $responsive_infix + $property-class-modifier} {
          @each $property in $properties {
            #{$property}: $value;
          }
        }
      }
    }
  }
}

@mixin color-variants() {
  @each $key, $color in $colors {
    .txt-#{$key} {
      color: $color;
    }
    .bg-#{$key} {
      background-color: $color;
    }
    .border-#{$key} {
      border-color: $color;
    }
  }
}

@mixin grid() {
  .row {
    display: flex;
    flex-wrap: wrap;
    margin-right: calc(-0.5 * #{$grid-gap});
    margin-left: calc(-0.5 * #{$grid-gap});

    > * {
      flex-shrink: 0;
      width: 100%;
      max-width: 100%;
      padding-right: calc(#{$grid-gap} * 0.5);
      padding-left: calc(#{$grid-gap} * 0.5);
    }
  }

  .row.no-gutter [class*="col"] {
    padding: 0;
  }

  [class*="col"].no-gutter {
    padding: 0;
  }

  [class*="col"] {
    padding: ($grid-gap / 2);
  }

  .col {
    flex-shrink: 1;
    flex-basis: 0;
    flex-grow: 1;
  }

  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      width: (100% * $i) / $grid-columns;
    }
    .col-offset-#{$i} {
      margin-left: (100% * $i) / $grid-columns;
    }
    .col-order-#{$i} {
      order: #{$i};
    }
  }

  @each $breakpoint, $width in $breakpoints {
    @include breakpoint($breakpoint) {
      @for $i from 1 through $grid-columns {
        .col-#{$breakpoint}-#{$i} {
          width: (100% * $i) / $grid-columns;
        }
        .col-#{$breakpoint}-offset-#{$i} {
          margin-left: (100% * $i) / $grid-columns;
        }
        .col-#{$breakpoint}-order-#{$i} {
          order: #{$i};
        }
      }
    }
  }
}
